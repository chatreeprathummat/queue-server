#!/usr/bin/env node

/**
 * =================================================================
 * Log Cleanup Script - ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏•‡πâ‡∏≤‡∏á Log Files ‡πÄ‡∏Å‡πà‡∏≤
 * =================================================================
 * 
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á log files ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏õ‡∏¢‡∏±‡∏á archive folder
 * 
 * @author Nursing System Development Team
 * @version 1.0
 * @date 2025-06-06
 */

const fs = require('fs').promises;
const path = require('path');
const moment = require('moment');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ cleanup
const CONFIG = {
  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
  retentionDays: {
    request: 30,        // Request logs ‡πÄ‡∏Å‡πá‡∏ö 30 ‡∏ß‡∏±‡∏ô
    connection: 7,      // Connection logs ‡πÄ‡∏Å‡πá‡∏ö 7 ‡∏ß‡∏±‡∏ô  
    system: 90,         // System logs ‡πÄ‡∏Å‡πá‡∏ö 90 ‡∏ß‡∏±‡∏ô
    autoGenerate: 60    // Auto-generate logs ‡πÄ‡∏Å‡πá‡∏ö 60 ‡∏ß‡∏±‡∏ô
  },
  
  // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs
  logsDir: path.join(__dirname, '../logs'),
  archiveDir: path.join(__dirname, '../logs/archive'),
  
  // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (MB)
  maxFileSizeMB: 100,
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á (regex)
  patterns: {
    request: /^request.*\.log$/,
    connection: /^connection.*\.log$/,
    system: /^system.*\.log$|^auth.*\.log$/,
    autoGenerate: /^auto-generate.*\.log$|^generate-plan.*\.log$/
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function isFileOld(filePath, retentionDays) {
  try {
    const stats = require('fs').statSync(filePath);
    const fileDate = moment(stats.mtime);
    const cutoffDate = moment().subtract(retentionDays, 'days');
    return fileDate.isBefore(cutoffDate);
  } catch (error) {
    console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå ${filePath}:`, error.message);
    return false;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
 */
function isFileTooLarge(filePath) {
  try {
    const stats = require('fs').statSync(filePath);
    const fileSizeMB = stats.size / (1024 * 1024);
    return fileSizeMB > CONFIG.maxFileSizeMB;
  } catch (error) {
    console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå ${filePath}:`, error.message);
    return false;
  }
}

/**
 * ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ archive
 */
async function moveToArchive(filePath, reason = '') {
  try {
    const fileName = path.basename(filePath);
    const archivePath = path.join(CONFIG.archiveDir, fileName);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå archive ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    await fs.mkdir(CONFIG.archiveDir, { recursive: true });
    
    // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
    await fs.rename(filePath, archivePath);
    console.log(`üì¶ ‡∏¢‡πâ‡∏≤‡∏¢ ${fileName} ‡πÑ‡∏õ archive ${reason}`);
    return true;
  } catch (error) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢ ${filePath} ‡πÑ‡∏õ archive:`, error.message);
    return false;
  }
}

/**
 * ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
 */
async function deleteFile(filePath, reason = '') {
  try {
    await fs.unlink(filePath);
    const fileName = path.basename(filePath);
    console.log(`üóëÔ∏è  ‡∏•‡∏ö ${fileName} ${reason}`);
    return true;
  } catch (error) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ${filePath}:`, error.message);
    return false;
  }
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
 */
async function processFolder(folderPath, logType) {
  try {
    const files = await fs.readdir(folderPath);
    const pattern = CONFIG.patterns[logType];
    const retentionDays = CONFIG.retentionDays[logType];
    
    let processedCount = 0;
    let archivedCount = 0;
    let deletedCount = 0;
    
    console.log(`\nüìÅ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ${logType} logs ‡πÉ‡∏ô ${folderPath}`);
    console.log(`   - ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå ${retentionDays} ‡∏ß‡∏±‡∏ô`);
    console.log(`   - ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${files.length}`);
    
    for (const file of files) {
      if (!pattern.test(file)) continue;
      
      const filePath = path.join(folderPath, file);
      processedCount++;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      if (isFileTooLarge(filePath)) {
        if (await moveToArchive(filePath, '(‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)')) {
          archivedCount++;
        }
        continue;
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      if (isFileOld(filePath, retentionDays)) {
        // ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (system, auth) ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ archive
        if (logType === 'system' || file.includes('auth')) {
          if (await moveToArchive(filePath, '(‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤)')) {
            archivedCount++;
          }
        } else {
          // ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
          if (await deleteFile(filePath, '(‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤)')) {
            deletedCount++;
          }
        }
      }
    }
    
    console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${processedCount}, archive: ${archivedCount}, ‡∏•‡∏ö: ${deletedCount}`);
    return { processedCount, archivedCount, deletedCount };
    
  } catch (error) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${folderPath}:`, error.message);
    return { processedCount: 0, archivedCount: 0, deletedCount: 0 };
  }
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå auto-generate ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
 */
async function processAutoGenerateFolder() {
  const autoGenPath = path.join(CONFIG.logsDir, 'auto-generate');
  return await processFolder(autoGenPath, 'autoGenerate');
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ cleanup
 */
function generateReport(results) {
  const totalProcessed = results.reduce((sum, r) => sum + r.processedCount, 0);
  const totalArchived = results.reduce((sum, r) => sum + r.archivedCount, 0);
  const totalDeleted = results.reduce((sum, r) => sum + r.deletedCount, 0);
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ Cleanup Log Files');
  console.log('='.repeat(60));
  console.log(`üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${totalProcessed}`);
  console.log(`üì¶ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≤‡∏¢ archive: ${totalArchived}`);
  console.log(`üóëÔ∏è  ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡∏ö: ${totalDeleted}`);
  console.log(`üíæ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ: ~${(totalDeleted * 5).toFixed(1)} MB (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£)`);
  console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ cleanup: ${moment().format('YYYY-MM-DD HH:mm:ss')}`);
  console.log('='.repeat(60));
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
 */
async function main() {
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£ Cleanup Log Files...');
  console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${moment().format('YYYY-MM-DD HH:mm:ss')}`);
  
  const results = [];
  
  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
  const folders = [
    { path: path.join(CONFIG.logsDir, 'request'), type: 'request' },
    { path: path.join(CONFIG.logsDir, 'connection'), type: 'connection' },
    { path: path.join(CONFIG.logsDir, 'system'), type: 'system' }
  ];
  
  for (const folder of folders) {
    if (require('fs').existsSync(folder.path)) {
      const result = await processFolder(folder.path, folder.type);
      results.push(result);
    } else {
      console.log(`‚ö†Ô∏è  ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${folder.path} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
    }
  }
  
  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• auto-generate folder
  if (require('fs').existsSync(path.join(CONFIG.logsDir, 'auto-generate'))) {
    const autoGenResult = await processAutoGenerateFolder();
    results.push(autoGenResult);
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  generateReport(results);
  
  console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£ Cleanup Log Files ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ cleanup:', error);
    process.exit(1);
  });
}

module.exports = { main, CONFIG }; 