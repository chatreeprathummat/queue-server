const path = require('path');
const fs = require('fs');

console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Configuration');
console.log('========================');

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö NODE_ENV
const environment = process.env.NODE_ENV || 'development';
console.log(`üìç Environment: ${environment}`);

// ‡πÇ‡∏´‡∏•‡∏î config
const config = require('./config/config');

console.log('\nüìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
console.log('-------------------');
console.log(`HTTP Port: ${config.http_port}`);
console.log(`HTTPS Enabled: ${config.https_enabled}`);
console.log(`HTTPS Port: ${config.https_port}`);
console.log(`Oracle User: ${config.oracle_user}`);
console.log(`MySQL Host: ${config.host}`);
console.log(`MySQL Database: ${config.mysql_database}`);
console.log(`Cert Path: ${config.cert_path}`);
console.log(`Key Path: ${config.key_path}`);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
console.log('\nüìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå:');
console.log('-------------------');

const files = [
    { path: '.env', required: environment === 'development' },
    { path: 'config/production.env', required: environment === 'production' },
    { path: config.cert_path, required: config.https_enabled },
    { path: config.key_path, required: config.https_enabled }
];

files.forEach(file => {
    const exists = fs.existsSync(file.path);
    const status = exists ? '‚úÖ' : (file.required ? '‚ùå' : '‚ö†Ô∏è');
    const note = !exists && file.required ? ' (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)' : '';
    console.log(`${status} ${file.path}${note}`);
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
console.log('\nüîß Environment Variables:');
console.log('-------------------------');
const envVars = [
    'NODE_ENV',
    'HTTP_PORT',
    'HTTPS_ENABLED',
    'NODE_ORACLEDB_USER',
    'NODE_MYSQL_HOST',
    'NODE_MYSQL_DATABASE',
    'SECRET_KEY',
    'REFRESH_SECRET_KEY'
];

envVars.forEach(varName => {
    const value = process.env[varName];
    const status = value ? '‚úÖ' : '‚ùå';
    const displayValue = varName.includes('PASSWORD') || varName.includes('SECRET') 
        ? (value ? '[HIDDEN]' : '‡πÑ‡∏°‡πà‡∏°‡∏µ') 
        : (value || '‡πÑ‡∏°‡πà‡∏°‡∏µ');
    console.log(`${status} ${varName}: ${displayValue}`);
});

console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ:');
console.log('--------');
if (environment === 'development') {
    console.log('‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Development mode - ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå .env');
} else if (environment === 'production') {
    console.log('‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Production mode - ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå config/production.env');
}

const hasErrors = files.some(file => file.required && !fs.existsSync(file.path)) ||
                 envVars.some(varName => !process.env[varName]);

if (hasErrors) {
    console.log('‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ');
    process.exit(1);
} else {
    console.log('‚úÖ Configuration ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
} 