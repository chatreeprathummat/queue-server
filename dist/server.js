"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// ‡πÉ‡∏ä‡πâ require ‡πÅ‡∏ó‡∏ô import ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ TypeScript config
const express = require('express');
const morgan = require('morgan');
const moment = require('moment-timezone');
const { readdirSync, readFileSync, existsSync } = require('fs');
const cors = require('cors');
const path = require('path');
const https = require('https');
const http = require('http');
const ManagementDB = require('./services/ManagementDB').default;
const { logger } = require('./services/logging');
const config = require('./config/config').default;
const app = express();
// ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå connection ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server
const db = ManagementDB.getInstance();
db.cleanStaleConnections().then(() => {
    console.log('[Server Start] ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå connection ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}).catch((err) => {
    console.error('[Server Start] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå connection:', err);
});
// Environment variables ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô config.ts ‡πÅ‡∏•‡πâ‡∏ß
// ========================================
// Middleware Setup with Enhanced Logging
// ========================================
// ‡∏™‡∏£‡πâ‡∏≤‡∏á custom tokens ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Morgan
morgan.token('datetime-th', () => {
    return moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
});
morgan.token('client-ip', (req) => {
    const ip = req.ip || req.connection?.remoteAddress || req.headers['x-forwarded-for'] || 'unknown';
    // ‡πÅ‡∏õ‡∏•‡∏á IPv6 loopback ‡πÄ‡∏õ‡πá‡∏ô IPv4 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    if (ip === '::1') {
        return '127.0.0.1(localhost)';
    }
    // ‡πÅ‡∏õ‡∏•‡∏á IPv6-mapped IPv4 ‡πÄ‡∏õ‡πá‡∏ô IPv4
    if (ip.startsWith('::ffff:')) {
        return ip.replace('::ffff:', '') + '(IPv4)';
    }
    return ip;
});
// Custom Morgan format ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° environment)
const isDevelopment = process.env.NODE_ENV === 'development';
console.log(`[‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤] NODE_ENV: ${process.env.NODE_ENV || 'undefined'}, isDevelopment: ${isDevelopment}`);
let morganFormat;
if (isDevelopment) {
    // Development - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏° IP ‡πÅ‡∏•‡∏∞ content-length
    morganFormat = '[:datetime-th] :client-ip :method :url :status :res[content-length] - :response-time ms';
}
else {
    // Production - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    morganFormat = '[:datetime-th] :method :url :status - :response-time ms';
}
console.log(`[‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤] Morgan Format: ${morganFormat}`);
// Apply middleware 
app.set('trust proxy', true); // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ IP address ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
app.use(morgan(morganFormat));
// JSON parsing middleware with error handling
app.use(express.json({
    limit: '200mb',
    verify: (req, res, buf, encoding) => {
        try {
            JSON.parse(buf.toString());
        }
        catch (err) {
            err.status = 400;
            err.body = buf;
            throw err;
        }
    }
}));
// JSON parsing error handler
app.use((err, req, res, next) => {
    if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {
        // ‡πÅ‡∏õ‡∏•‡∏á err.body ‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ substring
        let bodyDisplay = 'empty';
        if (err.body !== null && err.body !== undefined) {
            const bodyStr = typeof err.body === 'string' ? err.body : String(err.body);
            bodyDisplay = bodyStr.length > 500 ? bodyStr.substring(0, 500) + '...' : bodyStr;
        }
        console.error(`[JSON Parse Error] ${req.method} ${req.url}:`, {
            error: err.message,
            receivedBody: bodyDisplay,
            bodyType: typeof err.body,
            headers: req.headers
        });
        res.status(400).json({
            success: false,
            message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            error: "INVALID_JSON",
            details: `JSON parsing error: ${err.message}`
        });
        return;
    }
    next(err);
});
// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á custom headers
app.use(cors({
    origin: true, // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å origin ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á domain ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    credentials: true, // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á credentials
    exposedHeaders: [
        'X-Token-Expired-At',
        'X-Token-Remaining-Time',
        'X-Token-Remaining-Minutes',
        'X-Token-Should-Refresh',
        'X-Token-Status'
    ]
}));
// middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á server 
try {
    const healthCheckModule = require('./middleware/healthCheck');
    const systemHealthCheck = healthCheckModule.systemHealthCheck || healthCheckModule.default?.systemHealthCheck;
    if (typeof systemHealthCheck === 'function') {
        app.use('/api', systemHealthCheck);
        console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î healthCheck middleware ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    else {
        console.log('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° healthCheck middleware (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà function)');
    }
}
catch (error) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î healthCheck middleware:', error.message);
}
// Multi-tab handler middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô request ‡∏Ñ‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timeout
try {
    const multiTabHandlerModule = require('./middleware/multiTabHandler');
    const multiTabHandler = multiTabHandlerModule.multiTabHandler || multiTabHandlerModule.default || multiTabHandlerModule;
    if (typeof multiTabHandler === 'function') {
        app.use('/api', multiTabHandler);
        console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î multiTabHandler middleware ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    else {
        console.log('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° multiTabHandler middleware (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà function)');
    }
}
catch (error) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î multiTabHandler middleware:', error.message);
}
// Enhanced request logging middleware
app.use((req, res, next) => {
    const timestamp = moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
    let clientIP = req.ip || req.connection?.remoteAddress || req.headers['x-forwarded-for'] || 'unknown';
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á IP ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
    let ipDisplay = clientIP;
    if (clientIP === '::1') {
        ipDisplay = '127.0.0.1(localhost)';
    }
    else if (clientIP.startsWith('::ffff:')) {
        ipDisplay = clientIP.replace('::ffff:', '') + '(IPv4)';
    }
    // Safe logging - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ logging error ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    try {
        logger.request.info(`${req.method} ${req.url}`, {
            method: req.method,
            url: req.url,
            endpoint: req.originalUrl || req.url,
            clientIP: ipDisplay,
            originalIP: clientIP, // ‡πÄ‡∏Å‡πá‡∏ö IP ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢
            userAgent: req.get('User-Agent') || 'unknown',
            timestamp: timestamp,
            headers: {
                'content-type': req.get('Content-Type'),
                'authorization': req.get('Authorization') ? 'Bearer [HIDDEN]' : 'none'
            }
        });
    }
    catch (logError) {
        console.log(`[${timestamp}] ${req.method} ${req.url} - Logging error: ${logError.message}`);
    }
    next();
});
// Test endpoints
app.get('/', (req, res) => {
    res.json({
        message: 'üéâ TypeScript Server is working perfectly!',
        timestamp: new Date().toISOString(),
        server: 'TypeScript + Express',
        https: req.secure,
        version: '1.0.0'
    });
});
app.get('/test', (req, res) => {
    res.json({
        status: 'success',
        message: 'TypeScript server test endpoint',
        timestamp: new Date().toISOString(),
        https: req.secure
    });
});
// Auto-load routes ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå routes
readdirSync('./src/routes').forEach((file) => {
    if (file.endsWith('.ts') || file.endsWith('.js')) {
        // try {
        const routeModule = require('./routes/' + file);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ES6 module (default export) ‡∏´‡∏£‡∏∑‡∏≠ CommonJS
        const router = routeModule.default || routeModule;
        app.use('/api/inv', router);
        // if (typeof router === 'function') {
        //   app.use('/api/inv', router);
        //   console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î route ${file} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        // } else {
        //   console.warn(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° route ${file} (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà function)`);
        // }
        // } catch (error: any) {
        //   console.error(`‚ùå Error loading route ${file}:`, error.message);
        // }
    }
});
// Main global error handler
app.use((err, req, res, next) => {
    const timestamp = moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
    // Colors for error logging
    const errorColors = {
        reset: '\x1b[0m',
        red: '\x1b[31m',
        yellow: '\x1b[33m',
        blue: '\x1b[34m',
        bold: '\x1b[1m'
    };
    // ‡πÅ‡∏™‡∏î‡∏á error ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    console.error(`\n${errorColors.red}${errorColors.bold}üö® [ERROR] ${timestamp} ${req.method} ${req.url}${errorColors.reset}`);
    console.error(`${errorColors.red}‚îå‚îÄ Message: ${err.message}${errorColors.reset}`);
    console.error(`${errorColors.red}‚îú‚îÄ Type: ${err.name || 'Unknown'}${errorColors.reset}`);
    console.error(`${errorColors.red}‚îú‚îÄ Status: ${err.status || err.statusCode || 500}${errorColors.reset}`);
    // ‡πÅ‡∏™‡∏î‡∏á SQL Error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database errors)
    if (err.sql) {
        console.error(`${errorColors.yellow}‚îú‚îÄ SQL Query: ${err.sql}${errorColors.reset}`);
    }
    if (err.sqlMessage) {
        console.error(`${errorColors.yellow}‚îú‚îÄ SQL Message: ${err.sqlMessage}${errorColors.reset}`);
    }
    if (err.errno) {
        console.error(`${errorColors.yellow}‚îú‚îÄ SQL Error Code: ${err.errno}${errorColors.reset}`);
    }
    // ‡πÅ‡∏™‡∏î‡∏á Request details
    const bodyStr = req.body ? JSON.stringify(req.body) : 'empty';
    const bodyDisplay = bodyStr.length > 200 ? bodyStr.substring(0, 200) + '...' : bodyStr;
    console.error(`${errorColors.blue}‚îú‚îÄ Request Body: ${bodyDisplay}${errorColors.reset}`);
    console.error(`${errorColors.blue}‚îú‚îÄ Query Params: ${JSON.stringify(req.query || {})}${errorColors.reset}`);
    console.error(`${errorColors.blue}‚îú‚îÄ Headers Sent: ${res.headersSent}${errorColors.reset}`);
    // ‡πÅ‡∏™‡∏î‡∏á Stack trace (‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    if (err.stack) {
        const stackLines = err.stack.split('\n').slice(0, 5); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å
        console.error(`${errorColors.red}‚îî‚îÄ Stack Trace:${errorColors.reset}`);
        stackLines.forEach((line, index) => {
            const prefix = index === stackLines.length - 1 ? '   ‚îî‚îÄ' : '   ‚îú‚îÄ';
            console.error(`${errorColors.red}${prefix} ${line.trim()}${errorColors.reset}`);
        });
    }
    console.error(''); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    try {
        logger.request.error('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô', {
            error: err.message,
            errorType: err.name,
            stack: err.stack,
            sqlQuery: err.sql,
            sqlMessage: err.sqlMessage,
            sqlErrorCode: err.errno,
            path: req.path,
            method: req.method,
            timestamp: timestamp,
            url: req.url,
            body: req.body ? JSON.stringify(req.body).substring(0, 500) : 'no body',
            queryParams: req.query
        });
    }
    catch (logError) {
        console.error(`${errorColors.red}[LOG ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error log ‡πÑ‡∏î‡πâ: ${logError.message}${errorColors.reset}`);
    }
    if (!res.headersSent) {
        const statusCode = err.status || err.statusCode || 500;
        res.status(statusCode).json({
            success: false,
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
            error: err.message,
            errorType: err.name || 'Unknown',
            timestamp: timestamp,
            ...(process.env.NODE_ENV === 'development' && {
                stack: err.stack,
                sqlQuery: err.sql,
                sqlMessage: err.sqlMessage,
                requestBody: req.body,
                queryParams: req.query
            })
        });
    }
});
// Graceful shutdown function
async function gracefulShutdown(signal) {
    const timestamp = moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
    console.log(`\n[${timestamp}] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ${signal} - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö`);
    try {
        // ‡∏´‡∏¢‡∏∏‡∏î HTTP server ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö request ‡πÉ‡∏´‡∏°‡πà
        console.log(`[${timestamp}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î HTTP server...`);
        // ‡∏´‡∏¢‡∏∏‡∏î cron jobs
        console.log(`[${timestamp}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î cron jobs...`);
        // Add cron job stop logic here if needed
        // ‡∏õ‡∏¥‡∏î database connections
        console.log(`[${timestamp}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î database connections...`);
        if (db && typeof db.cleanStaleConnections === 'function') {
            await db.cleanStaleConnections();
        }
        console.log(`[${timestamp}] ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        process.exit(0);
    }
    catch (error) {
        console.error(`[${timestamp}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö:`, error);
        process.exit(1);
    }
}
// ‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì shutdown
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));
// Start server
const httpPort = parseInt(config.http_port, 10) || 5009;
const httpsPort = config.https_port || 5443;
// Colors for console output
const colors = {
    reset: '\x1b[0m',
    green: '\x1b[32m', // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    red: '\x1b[31m', // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error
    bold: '\x1b[1m' // ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
};
// HTTP Server
const httpServer = http.createServer(app);
httpServer.listen(httpPort, () => {
    const timestamp = moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
    console.log(`[${timestamp}] ${colors.green}‚úÖ HTTP Server running on port ${httpPort}${colors.reset}`);
});
// HTTPS Server (if enabled)
if (config.https_enabled) {
    try {
        // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á SSL
        const options = {
            key: readFileSync(config.key_path),
            cert: readFileSync(config.cert_path)
        };
        // ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå HTTPS
        https.createServer(options, app).listen(httpsPort, () => {
            const timestamp = moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
            console.log(`[${timestamp}] ${colors.green}‚úÖ HTTPS Server running on port ${httpsPort}${colors.reset}`);
        });
    }
    catch (error) {
        const timestamp = moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
        console.error(`[${timestamp}] ${colors.red}‚ùå HTTPS Error: ${error.message}${colors.reset}`);
    }
}
// ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß cron jobs
//console.log('Starting cron jobs...');
//startCronJobs();
exports.default = app;
